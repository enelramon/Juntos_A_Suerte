@inject PersonService personService
@inject NotificationService notify

<div class="card">
    <div class="card-header">
        <h2 class="card-title text-center">Personas</h2>
    </div>
    <div class="card-body">
        <div class="mb-3">
            <label>Nombre o Nombres separado por coma</label>
            <input type="text" @bind="Name" class="form-control" />
        </div>

        <div class="mb-3">
            <label class="form-check-label" for="flexCheckChecked">Para agregar varias personas en un solo paso ponga los nombres separados por coma</label>
        </div>

        <hr />
        <div class="form-control border-0 d-flex flex-wrap">
            @foreach (var person in People)
            {
                <div class="p-1 border-1">
                    <h5>
                        <span class="badge border border-gray text-body ">
                            @person.Name <button class="bg-transparent border-0 text-body"
                            @onclick="@(()=> Delete(person.PersonId))">
                                X
                            </button>
                        </span>
                    </h5>
                </div>
            }

        </div>

    </div>
    <div class="card-footer">
        <button type="button" class="btn d-flex btn-success" @onclick="Save">Guardar</button>
    </div>
</div>

@code {
    public string Name { get; set; } = "";
    public List<Person> People { get; set; } = new List<Person>();

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        People = await personService.GetPeopleAsync();
    }

    public async Task New()
    {
        People = await personService.GetPeopleAsync();
        notify.ShowNotification(title: "Restaurado", message: "Se ha actualizado correctamente", NotificationSeverity.Info);
    }

    public async Task Save()
    {
        await personService.SaveAsync(Name);

        Name = string.Empty;
        await Refresh();
        notify.ShowNotification(title: "Guardado", message: "Se ha guardado exitosamente", NotificationSeverity.Success);
    }

    public async Task Delete(int personId)
    {
        await personService.DeletePersonAsync(personId);
        await Refresh();
        notify.ShowNotification(title: "Eliminado", message: "Ha sido eliminado con éxito", NotificationSeverity.Error);
    }
}