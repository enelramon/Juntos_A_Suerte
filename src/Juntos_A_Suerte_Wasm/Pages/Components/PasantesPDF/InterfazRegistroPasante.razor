@page "/RegistroPasante"
@page "/RegistroPasante/{PasanteID}"

@inject CartaService CartaService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Forms

<EditForm Model="pasante" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white d-flex justify-content-center align-items-center">
            <h3 class="mb-0"> <i class="fas fa-clipboard-list"></i> Registro de Pasantes</h3>
        </div>
        <div class="card-body">

            <div class="row">
                <div class="col-md-4 mb-3">
                    <label for="Nombre" class="form-label"><strong>Nombres del Pasante:</strong></label>
                    <div class="input-group">
                        <InputText @bind-Value="pasante.Nombres" @oninput="CapitalizarNombreLetraHandler" class="form-control" />
                        <ValidationMessage For="@(() => pasante.Nombres)" />
                    </div>
                </div>

                <div class="col-md-4 mb-3">
                    <label for="Cedula" class="form-label"><strong>Cédula:</strong></label>
                    <div class="input-group">
                        <InputText @bind-Value="pasante.Cedula" class="form-control" />
                        <ValidationMessage For="@(() => pasante.Cedula)" />
                    </div>
                </div>

                <div class="col-md-4">
                    <label for="Carrera" class="form-label"><strong>Carrera del Pasante:</strong></label>
                    <div class="input-group">
                        <InputText @bind-Value="pasante.Carrera" @oninput="CapitalizarCarreraLetraHandler" class="form-control" />
                        <ValidationMessage For="@(() => pasante.Carrera)" />
                    </div>
                </div>
            </div>

            <div class="row mb-3">
          
                <div class="col-md-4">
                    <label for="Matricula" class="form-label"><strong>Matrícula del Pasante:</strong></label>
                    <div class="input-group">
                        <InputText @bind-Value="pasante.Matricula" class="form-control" />
                        <ValidationMessage For="@(() => pasante.Matricula)" />
                    </div>
                </div>

                <div class="col-md-4 position-relative">
                    <label for="Pasantia" class="form-label"><strong>Pasantía del Pasante:</strong></label>
                    <select @bind="pasante.Pasantia" class="form-select">
                        <option value="Pasantia 1">Pasantía 1</option>
                        <option value="Pasantia 2">Pasantía 2</option>
                    </select>
                    <ValidationMessage For="@(() => pasante.Pasantia)" />
                    <div class="invalid-tooltip">Please select a pasantia.</div>
                </div>

                <div class="col-md-4">
                    <label for="Cantidad" class="form-label"><strong>Cantidad de Horas:</strong></label>
                    <InputNumber @bind-Value="pasante.CantidadHoras" class="form-control" />
                    <ValidationMessage For="@(() => pasante.CantidadHoras)" />
                </div>
            </div>

            <div class="row mb-3">

                <div class="col-md-4">
                    <label for="DiaInicio" class="form-label"><strong>Fecha de inicio:</strong></label>
                    <InputDate @bind-Value="pasante.FechaInicio" class="form-control" />
                    <ValidationMessage For="@(() => pasante.FechaInicio)" />
                </div>

                <div class="col-md-4">
                    <label for="DiaFinal" class="form-label"><strong>Fecha de finalización:</strong></label>
                    <InputDate @bind-Value="pasante.FechaFinal" class="form-control" />
                    <ValidationMessage For="@(() => pasante.FechaFinal)" />
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="d-flex justify-content-center mb-3">
            <button type="submit" class="btn btn-outline-success ml-2" @onclick="Guardar">
                <span><i class="bi bi-arrow-bar-down"></i></span> Guardar
            </button>

            <span class="mx-2"></span>

            <a type="button" href="/PasanteIndex/" class="btn btn-outline-danger">
                <i class="bi bi-house-fill"></i> Home
            </a>

            <span class="mx-2"></span>

            <button type="submit" class="btn btn-outline-success ml-2" @onclick="GuardarImprimir">
                <span><i class="bi bi-arrow-bar-down"></i></span> Guardar e Imprimir
            </button>

        </div>



    </div>

</EditForm>


@code {
    public Pasantes pasante = new Pasantes();
    private string errorMessage = "";

    [Parameter]
    public int PasanteID{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        pasante.Pasantia = "Pasantía 1";
        pasante.FechaInicio = DateTime.Today;
        pasante.FechaFinal = DateTime.Today;
        pasante.FechaExpide = DateTime.Today;
    }

    private async Task Guardar()
    {
        if (string.IsNullOrWhiteSpace(pasante.Nombres) ||
            string.IsNullOrWhiteSpace(pasante.Cedula) ||
            string.IsNullOrWhiteSpace(pasante.Carrera) ||
            string.IsNullOrWhiteSpace(pasante.Matricula) ||
            pasante.FechaInicio == default ||
            pasante.FechaFinal == default)
        {
            errorMessage = "Por favor, complete todos los campos obligatorios.";
            return;
        }

        if (pasante.FechaFinal <= pasante.FechaInicio)
        {
            errorMessage = "La fecha de finalización debe ser posterior a la fecha de inicio.";
            return;
        }

        errorMessage = "";
        await CartaService.SaveOrUpdatePasanteAsync(pasante);
        NavigationManager.NavigateTo("/PasanteIndex");
    }

    private async Task GuardarImprimir()
    {
        if (string.IsNullOrWhiteSpace(pasante.Nombres) ||
            string.IsNullOrWhiteSpace(pasante.Cedula) ||
            string.IsNullOrWhiteSpace(pasante.Carrera) ||
            string.IsNullOrWhiteSpace(pasante.Matricula) ||
            pasante.FechaInicio == default ||
            pasante.FechaFinal == default)
        {
            errorMessage = "Por favor, complete todos los campos obligatorios.";
            return;
        }

        if (pasante.FechaFinal <= pasante.FechaInicio)
        {
            errorMessage = "La fecha de finalización debe ser posterior a la fecha de inicio.";
            return;
        }

        errorMessage = "";
        await CartaService.SaveOrUpdatePasanteAsync(pasante);
        NavigationManager.NavigateTo($"/PasanteImprimir/{pasante.PasanteId}");
    }

    private async Task CapitalizarNombreLetraHandler(ChangeEventArgs e)
    {
        string valor = e.Value.ToString();

        if (!string.IsNullOrEmpty(valor))
        {
            pasante.Nombres = char.ToUpper(valor[0]) + valor.Substring(1);
        }
    }

    private async Task CapitalizarCarreraLetraHandler(ChangeEventArgs e)
    {
        string valor = e.Value.ToString();

        if (!string.IsNullOrEmpty(valor))
        {
            pasante.Carrera = char.ToUpper(valor[0]) + valor.Substring(1);
        }
    }

}

