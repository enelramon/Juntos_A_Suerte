@page "/"
@inject TeamService teamService
@inject PersonService personService
@inject NavigationManager NavigationManager

<div class="card">
    <div class="d-flex justify-content-between align-items-center">
        <h5>Version 1.0.2</h5>
        <NavLink class="btn btn-sm btn-info rounded-pill" href="/RegistroPasante">Registrar Pasante</NavLink>
    </div>

    <div class="card-header">
        <h2 class="card-title text-center">GRUPOS</h2>
    </div>
    <div class="card-body">
        <div class="input-group mb-3">
            <input type="text" @bind="Name" class="form-control" placeholder="Nombre del grupo" aria-label="Recipient's username" aria-describedby="basic-addon2">
            <div class="input-group-append">
                <button class="btn btn-outline-primary" type="button" @onclick="Save">Nuevo Grupo</button>
            </div>
        </div>
        <div class="d-flex justify-content-between">
            <button type="button" class="btn btn-warning rounded-pill" data-bs-toggle="modal" data-bs-target="#personModal">Add Personas</button>
            <button type="button" class="btn btn-success rounded-pill" @onclick="Shuffle">Sortear</button>
        </div>
        <hr />
        <div class="form-control border-0 d-flex flex-wrap">
            @foreach (var team in Teams)
            {
                <TeamComponent Team="@team" OnTeamDeleted="@Delete"></TeamComponent>
            }

        </div>
    </div>
</div>

<!-- The Person Modal -->
<div class="modal" id="personModal">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <PersonComponent />
        </div>
    </div>
</div>
@code
{
    public string Name { get; set; } = "";
    public List<Team> Teams { get; set; } = new List<Team>();

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        Teams = await teamService.GetTeamsAsync();
        StateHasChanged();
    }

    public async Task Save()
    {
        await teamService.SaveAsync(Name);

        Name = string.Empty;
        await Refresh();
    }

    public async Task Delete(int teamId)
    {
        await teamService.DeleteTeamAsync(teamId);
        await Refresh();
    }

    public async Task Shuffle()
    {
        var people = await personService.GetPeopleAsync();
        ShuffleService.ShufflePeopleIntoTeams(Teams, people);
        await teamService.SaveTeamsAsync(Teams);
    }
}